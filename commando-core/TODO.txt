
FEATURES
-auto register actions for commands with spring
-dispatch commands to actions
-filter commands and results
-schedule commands
-predefined common results
-command validation in actions
-Command serialization to XML (extendable)

TODO/IDEAS

V1.0

DONE:
Remove Spring dependency and only add it as new module(s)
-InVmDispatcher
	-Configurable executor. Prepare also to ForkJoinPool
-SpringInVmDispatcher (autowired, transactional)
-Rest HTTP dispatcher
	-Servlet 3 async
	-URL is command specific
		-@Path annotation (jaxrs) is used on commands to modify url  ???SUPPORTED???
-Jms dispatcher
	-Implement as remote dispatcher and receiver
	-configurable message format
Timeout support
	-All dispatchers should have timeout. Remotes delegates timeouts to the endpoint and protocoll specific timeout are used like Jms ttl.
	-The executor thread should be recycled on timeout, to prevent hanging threads.
Retry filter with retry policy
Circuit breaker filter
Switch to Observable from ResultFuture
	-Be able to register the callback into the ResultObservable instead of the DispatcherCallback. Before is not needed since the command is fully prepared by the caller.
	-The ObserverResult implementation is extendable to support later reactive or nio execution
Clean and separate -spring project dependencies. The spring import shouldn't import activemq dependency spring-core, spring-remote, etc. could solve it
Spring Boot actuator support
Spring security context manager
DoS protection (Throttle filter)

TODO:

Clean spring boot configuration
Create sample PoC project with Spring Boot, Http+Jms
Unit and system test coverage

---------------------


FROM HERE MOVED TO TRELLO : https://trello.com/b/7fKJOsOz/commando





















Spring security integration
	Run as
	Run as async (support for current user and other user too)
	RolesAllowed


Service registry with dispatcher

Load balancer dispatcher (uses an LB strategy to delegate to dispatcher instances)
    -Uses registry data (first version only startup state)
    -Load balancer dispatcher (uses an LB strategy to delegate to dispatcher instances)

Dynamic scaling.
	-Start of an instance -> registry -> notify dispatcher LB's -> automatically get load
	-Stop of an instance is handled by LB (retry should go to another node)
    -Auto remove timeout nodes from LB's

Cache support
	-Implement as a DispatcherFilter
	-Remote uses headers
	-Local cache? No headers
	-Cache invalidation support. (invalidation header. cache always comes with key)

Remoting
    -Redis support
    -RabbitMQ support

Other Filters
	-Default result in case of error
	-Logging
	-Monitoring (Command/Result logging, action execution time, jmx support)



Filters
	-Priority? (The queue for executor could be a priority queue)
	-Streaming. (Chunk streams?)



V?.?

Transaction usecases
-Run each command in separate transaction
-Run multiple commands in one transaction
-Run multiple in the same but one should commit anyhow (example: audit logging)

Command factory pattern for creating commands from different inputs (like rest parameters or camel message)




